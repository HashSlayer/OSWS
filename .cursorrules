# OSWS AI Agent Guidelines

When working with this codebase, maintain a balance between stability, consistency, and improvement.

## Priority Hierarchy

1. Task Focus (Highest Priority)
   - Complete the specific task requested
   - Proactively suggest and implement relevant improvements
   - Bundle related optimizations that enhance the solution
   - Explain improvement rationale clearly and concisely

2. Code Preservation
   - Maintain core functionality and behavior
   - Preserve critical timing and coordinate systems
   - Keep existing variable names unless improvement is clear
   - Refactor when it demonstrably improves the code

3. Consistency Standards
   - Apply identical improvements across similar patterns
   - Document and explain improvement patterns
   - Verify consistency across affected files
   - Establish and follow best practices

4. Educational Value
   - Explain complex concepts while improving code
   - Challenge inefficient approaches with better solutions
   - Demonstrate modern alternatives when relevant
   - Share knowledge about performance implications

## Naming Conventions

1. Main Bot Files (kebab-case)
   - Purpose: Executable bot implementations
   - Pattern: descriptive-bot-name.py
   - Examples:
     * nightmare-zone.py
     * iron-miner.py
     * log-lighter.py

2. Utility Modules (snake_case)
   - Purpose: Importable functionality
   - Pattern: descriptive_module_name.py
   - Examples:
     * base_gui.py
     * item_slots.py
     * movements.py

3. Classes (PascalCase)
   - Purpose: Object-oriented implementations
   - Pattern: DescriptiveClassName
   - Examples:
     * BaseGUI
     * IronMinerGUI
     * NightmareZoneGUI

4. Functions & Variables (snake_case)
   - Purpose: Actions and data storage
   - Pattern: descriptive_name
   - Examples:
     * def walker()
     * current_slot = 1

## Core Behaviors

1. Change Management
   - Verify file existence before operations
   - Never delete files unless explicitly requested
   - Confirm current state before suggesting changes
   - Prefer preservation over modification

2. Human-Like Automation Standards
   - Use bezierMove() with appropriate duration scaling
   - Implement dynamic timing variations based on action context
   - Add micro-pauses and perturbations proportional to movement distance
   - Consider human reaction times in interaction sequences

3. Code Organization
   - Keep utility functions in appropriate directories:
     * Core timing/movement: utils/core/
     * GUI components: utils/gui/
     * Click handling: utils/clicker.py
   - Maintain clear separation of concerns
   - Follow established project structure
   - Keep related functionality together

## Implementation Rules

### Mouse Movement
```python
# Required pattern:
from utils.movements import bezierMove
# Duration scales with distance for natural movement
# Short moves (< 100px): ~0.1-0.3s
# Medium moves (100-500px): ~0.2-0.6s
# Long moves (>500px): ~0.4-1.0s
bezierMove(x, y)

# Never use:
import pyautogui as pag
pag.moveTo(x, y)  # Lacks human-like characteristics
```

### Timing Functions
```python
# Required pattern:
from utils.core.timing import sleep, sleep_if
# Base time + random variance up to 60% longer
sleep(0.3, 0.5)  # Sleeps between 0.3 - 0.8 seconds
sleep_if(0.5)    # 50% chance to pause

# Never use:
import time
time.sleep(1)  # Predictable patterns are detectable
```

### Error Handling Pattern
```python
try:
    # Operation code
    if not running:
        clean_exit()
    if error_threshold_exceeded:
        log_error_state()
        implement_recovery_strategy()
except Exception as e:
    gui.append_message(f"Error: {e}")
    log_error_state()  # Log before exit
    clean_exit()
```

## Documentation Standards

1. New Code
   - Comprehensive docstrings required
   - Parameter types and constraints
   - Return value descriptions
   - Usage examples
   - Performance considerations

2. Existing Code Modifications
   - Preserve existing documentation style
   - Update only affected sections
   - Maintain existing format
   - Add documentation only if missing or incorrect

## Response Guidelines

1. Communication Clarity
   - Match explanation detail to change complexity
   - For simple changes: Brief, focused responses
   - For complex changes: Detailed explanations
   - Highlight critical changes first

2. Tool Usage
   - Plan tool sequence before starting
   - Use minimum necessary tools
   - Verify tool necessity before use
   - Prefer targeted tools over broad ones

## Safety & Reliability

1. State Management
   - Implement clean exit handlers
   - Add keyboard interrupt detection
   - Include configurable fail-safes
   - Monitor long-running operations

2. Error Prevention
   - Verify coordinates before operations
   - Implement retry mechanisms
   - Add appropriate logging
   - Include state recovery options

## Testing & Quality

1. Code Quality
   - Maximum file length: 600 lines
   - Follow Python PEP 8 guidelines
   - Use descriptive names
   - Consider memory usage

2. Testing Requirements
   - Include unit tests for critical functions
   - Test error handling paths
   - Verify state management
   - Test boundary conditions

## Game Context & Mechanics

1. Core Concepts
   - Game Ticks: 0.6 seconds between actions
   - Click Mechanics:
     * Left click: Primary action
     * Right click: Context menu
     * Space/Number: Dialog/menu navigation
   - Inventory:
     * 28 slots total
     * Items can stack (noted items, resources)
     * Grid layout: 4x7, indexed 0-27

2. Common Activities
   - Banking:
     * Withdraw-X requires menu navigation
     * Quick-withdraw/deposit all
     * Note/unnote item conversions
   - Resource Gathering:
     * Click resource -> Wait for animation -> Inventory update
     * Activity indicators: Animation, XP drops
     * Common intervals: Mining (2-3s), Woodcutting (2.4s)
   - Combat & Prayer:
     * Prayer flicking timing (0.6s ticks)
     * Potion boost intervals (60-90s)
     * NMZ mechanics (absorption, overload timing)

3. Anti-Pattern Detection
   - Excessive Clicking: More than 1 click per action
   - Perfect Timing: Avoid exact intervals
   - Linear Movement: Mouse should use natural curves
   - Static Positions: Add pixel variance to coordinates

4. Activity Patterns
   - Resource Cycles:
     * Gather until inventory full
     * Bank/drop inventory
     * Return to resource
   - Combat Cycles:
     * Monitor health/prayer
     * Manage potion timers
     * Handle inventory changes
   - Crafting/Smithing:
     * Bank preset setups
     * Make-X menu navigation
     * Progress tracking 